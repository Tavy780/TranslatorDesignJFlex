/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN, DIVIDE;
terminal Integer    NUM;        // our scanner provides numbers as integers
terminal LBRACE ,RBRACE;
terminal LBRACKET, RBRACKET;
terminal COMMA;
terminal LESSTHAN, GREATERTHAN, LESSEQTHAN, GREATEREQTHAN, EQUAL, DIFFTHAN;
terminal SET;
terminal IF, ELSE, WHILE;
terminal RETURN, VOID;
terminal INT;
terminal ID;

/* Non terminals */
non terminal            expression;
non terminal 			expression_stmt;
non terminal			selection_stmt;
non terminal			iteration_stmt;
non terminal 			return_stmt;
non terminal 			compound_stmt;
non terminal			declaration_list;
non terminal 			declaration;
non terminal 			var_declaration;
non terminal 			var;
non terminal 			type_specifier;
non terminal 			statement_list;
non terminal			statement;
non terminal            expr_set;
non terminal 			func_declaration;
non terminal            call;
non terminal 		    args;
non terminal 			arg_list;
non terminal 			local_declarations; 
non terminal			params; // parameters
non terminal 			param_list; // the parameters list
non terminal			param; // the parameter from the list of parameters
non terminal 			program; // the main program how is structured
non terminal 			relop; // relation operators
non terminal            addop; // addition operators
non terminal 			mulop;
non terminal 			term;
non terminal			factor;
non terminal            additive_expression;      // additive_expression
non terminal    		simple_expression;   // simple expression
/* Precedences */
precedence nonassoc ELSE;	// Inserted by Eclipse plugin
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left UMINUS;
precedence nonassoc EQUAL,DIFFTHAN;
precedence left LESSTHAN,GREATERTHAN;
precedence left LESSEQTHAN,GREATEREQTHAN;

/* The grammar rules */		
program ::= declaration_list {:System.out.println("A declaration list found in the program");:}
		 ;
		
statement_list ::= statement_list statement {: System.out.println("A system found in the list of "); :}
			   |	{: System.out.println("There are no statements"); :}
			   ;        

statement ::= expression_stmt {: System.out.println("An expression statement detected"); :}
		   | compound_stmt  {: System.out.println("A compound statement detected"); :}
		   | iteration_stmt {: System.out.println("An iteration statement detected"); :}
		   | selection_stmt {: System.out.println("A selection statement detected"); :}
		   | return_stmt {: System.out.println("A return statement detected"); :}
		   ;

expression ::= var SET expression {: System.out.println("A variable is set with an expression in an expression"); :}
			| simple_expression {: System.out.println("A simple expression"); :}
			;

expression_stmt ::= expression SEMI {: System.out.println("An expression with a semicolon"); :}
				| SEMI {: System.out.println("A semicolon with no expression"); :}
				;

iteration_stmt ::=  WHILE LPAREN expression RPAREN statement {: System.out.println("An iteration statement with while keyword"); :}
				;

selection_stmt ::= IF LPAREN expression RPAREN statement {: System.out.println("An if statement with no else statement detected");  :}
				| IF LPAREN expression RPAREN statement ELSE statement{: System.out.println("An if statement with an else statement detected"); :}
				;

return_stmt ::= RETURN SEMI {: System.out.println("Return statement with no expression"); :}
			| RETURN expression SEMI {: System.out.println("A return statement that returns an expression"); :}
			;

declaration_list ::= declaration_list declaration {: System.out.println("The declaration appended to the declaration list"); :}
				  | declaration {: System.out.println("The declaration"); :} 
				  ;

declaration ::= var_declaration {: System.out.println("Variable declaration detected in the declaration list"); :}
			| func_declaration {: System.out.println("Function declaration detected in the declaration list"); :}
			;				
			
local_declarations ::= local_declarations var_declaration {: System.out.println("A variable declaration in this local declaration"); :}
				   |									  {: System.out.println("No local declarations"); :}
				   ;

compound_stmt ::= LBRACE local_declarations statement_list RBRACE   {: System.out.println("Compound statement"); :}
			;     
			
args ::= arg_list {: System.out.println("The argument list"); :}
		 |	{: System.out.println("No arguments available"); :}
		 ;
		   
arg_list ::= arg_list COMMA expression {: System.out.println("This is an expression in a list of arguments"); :} 
		  | expression {: System.out.println("It's an expression that the list of arguments begins with"); :}
		  ;
		  
call ::= ID:i LPAREN args RPAREN {: System.out.println("The function with the id " + i + " has no arguments "); :}
	 ;

params ::= param_list {: System.out.println("parameter list");  :}
		 | VOID		  {: System.out.println("No parameters available"); :}
		 ;
		   
param_list ::= param_list COMMA param {: System.out.println("Parameter with a comma"); :}
		   | param {: System.out.println("Parameter with no comma"); :}
		   ;

param ::= type_specifier ID:i {: System.out.println("Parameter with the id " + i); :} 
	   | type_specifier ID:i LBRACKET RBRACKET {: System.out.println("Parameter array with the id " + i); :}
	   ;
				  
func_declaration ::= type_specifier ID:i LPAREN params RPAREN compound_stmt {: System.out.println("The function declaration with the id " + i + " and it also has parameters"); :}
		          ;

var_declaration ::= type_specifier ID:i SEMI {: System.out.println(" variable declaration of id " + i); :}
				| type_specifier ID:i LBRACKET NUM:n RBRACKET SEMI {: System.out.println(" variable declaration of an array with " + n + " and id " + i ); :}
				; 

var ::= ID:i {: System.out.println("The id of the variable " + i); :}
	| ID:i LBRACKET expression RBRACKET {: System.out.println("The variable with the id " + i + " is an array with an expression in the index"); :} 
	;

type_specifier ::= INT {: System.out.println("INT type "); :}
				| VOID {: System.out.println("VOID type "); :}
				;
				
relop ::= LESSEQTHAN {: System.out.println("<= less or equal than"); :}
		| LESSTHAN {: System.out.println("< less than"); :}
		| GREATERTHAN {: System.out.println("> greater than"); :}
		| GREATEREQTHAN {: System.out.println(">= greater or equal than"); :}
		| EQUAL {: System.out.println("== equal"); :}
		| DIFFTHAN {: System.out.println("!= different than"); :}
		;				
				
addop ::= PLUS {: System.out.println("+ plus operator"); :}
	   | MINUS {: System.out.println("- minus operator"); :}
	   ;

mulop ::= TIMES {: System.out.println("* times"); :}
	   | DIVIDE {: System.out.println("/ divide"); :}
	   ;
	   
simple_expression ::= additive_expression relop additive_expression {: System.out.println("A comparison operator"); :}
				   | additive_expression {: System.out.println("An additive expression"); :}
				   ;
				   
additive_expression ::= additive_expression addop term{: System.out.println("Making an additive expression list with an addition or subtraction operator and a term"); :}
					 | term {: System.out.println("A simple term that is the beginning term of the expression"); :}
					 ;

term ::= term mulop factor {: System.out.println("A term multiplied or divided by the factor"); :}
	 | factor {: System.out.println("A factor"); :}
	 ;

factor ::= LPAREN expression RPAREN {: System.out.println("(the expression) is a considered factor"); :}
		| var {: System.out.println("The variable is a factor"); :}
		| call {: System.out.println("The function call is a factor"); :}
		| NUM:n {: System.out.println("The number " + n + " is in the epxression"); :}
		;
